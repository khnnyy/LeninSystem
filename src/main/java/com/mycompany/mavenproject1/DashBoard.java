package com.mycompany.mavenproject1;

import ActionCellButton.TableActionCellEditor;
import ActionCellButton.TableActionCellRender;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.bson.Document;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author khanny
 */
public class DashBoard extends javax.swing.JFrame {

    /**
     * Creates new form DashBroad
     */
    
    private final MangoDBConnection mdb;
    
    public DashBoard() {
        initComponents();
        
        mdb = new MangoDBConnection();
        
        // Change the size of the second column (Name)
        TableColumnModel columnModel = Dsb_Table.getColumnModel();
        TableColumn actionColumn = columnModel.getColumn(8);
        actionColumn.setPreferredWidth(100);
        
        Dsb_Table.getColumnModel().getColumn(8).setCellRenderer(new TableActionCellRender());
        Dsb_Table.getColumnModel().getColumn(8).setCellEditor(new TableActionCellEditor());
    }
    
        private void updateTable() {
        // Clear existing table data (optional)
        DefaultTableModel model = (DefaultTableModel) Dsb_Table.getModel();
        model.setRowCount(0);

        // Use a background thread to fetch and update data
        new SwingWorker<List<Document>, Void>() {
            @Override
            protected List<Document> doInBackground() {
                return mdb.getProjectData();
            }

            @Override
            protected void done() {
                try {
                    List<Document> projectData = get();
                    for (Document document : projectData) {
                        String jobCode = getStringValue(document, "job_code");
                        String clientName = getStringValue(document, "client_name");
                        String status = getStringValue(document, "status");
                        String dateIssued = getStringValue(document, "date_issued");
                        String dateConfirmed = getStringValue(document, "date_confirmed");
                        String runningDays = getStringValue(document, "running_days");
                        String dateDue = getStringValue(document, "date_due");
                        String warranty = getStringValue(document, "warranty");
                        
                        //                        if (dateIssued != null) {  // Check for null values before formatting
//                            
//                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  // Adjust format as needed
//                            String formattedDateIssued = formatter.format(dateIssued);
//                        }
                        // Add a new table row with extracted data

                        // Add a new table row with extracted data
                        model.addRow(new Object[]{jobCode, clientName, status, dateIssued, dateConfirmed, runningDays, dateDue, warranty});
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }.execute();
    }

    private String getStringValue(Document document, String key) {
        Object value = document.get(key);
        return value != null ? value.toString() : null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        configEmail = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Dsb_Table = new javax.swing.JTable();
        refresh = new javax.swing.JToggleButton();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Create Job Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Database Config ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        configEmail.setText("Email Config");
        configEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configEmailActionPerformed(evt);
            }
        });

        Dsb_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Order No.", "Client Name", "Project Status", "Date Issued ", "Date Confirmed", "Running Days", "Date Due", "Warranty Status", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Dsb_Table.setRowHeight(40);
        jScrollPane1.setViewportView(Dsb_Table);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(configEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1042, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new MangoDBConfig().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new JobOrderForm().setVisible(true);
//        try {
//            String user = config.getUser();
//            String cluster = config.getCluster();
//            String database = config .getDatabase();
//            String collection = config.getCollection();
//            
//            BufferedReader br = new BufferedReader(new FileReader("encryptedData.jit"));   
//            
//            
//            if(user.isEmpty() || br.readLine() == null || cluster.isEmpty() || database.isEmpty() || collection.isEmpty()){
//                JOptionPane.showMessageDialog(null,"Please input database Config.");
//                } else {
//                    new JobOrderForm().setVisible(true); 
//            }   
//            
//            } catch (IOException ex) {
//                Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
//            }
    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void setVisible(boolean visible) {
      super.setVisible(visible);

      // Update table on initial form display
      updateTable();
    }
    private void configEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configEmailActionPerformed
       new EmailConfig().setVisible(true);
    }//GEN-LAST:event_configEmailActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        
        updateTable();
    }//GEN-LAST:event_refreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashBoard().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Dsb_Table;
    private javax.swing.JToggleButton configEmail;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton refresh;
    // End of variables declaration//GEN-END:variables
}
